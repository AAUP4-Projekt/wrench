use crate::frontend::ast::Expr;
use crate::frontend::ast::Operator;
use crate::frontend::ast::Statement;
use crate::frontend::ast::TypeConstruct;
use crate::frontend::ast::Declaration;
use crate::frontend::ast::Parameter;
use crate::frontend::ast::ColumnAssignmentEnum;
use crate::frontend::ast::make_compound;
use crate::frontend::ast::ast_and;
use crate::frontend::ast::ast_greater_than_or_equal;
use crate::frontend::ast::ast_greater_than;
use crate::frontend::lexer::Token;

// This beings the grammer definition used by lalrpop
grammar;

// External definitions for the grammar

extern {
    // Type used to track token positions
    type Location = usize;

    // Mapping lexer tokens to the grammar's internal Token enum, so they can be used in grammar
    enum Token {

        // Character operators
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "**" => Token::Expon,
        "/" => Token::Slash,
        "!" => Token::ExclamationMark,
        "%" => Token::Modulo,
        "==" => Token::EqualsOperator,

        // Values
        Stringliteral => Token::Stringliteral(<String>),
        DoubleLiteral => Token::Doubleliteral(<f64>),
        Integer => Token::Integer(<i32>),
        "true" => Token::True,
        "false" => Token::False,

        // Identifier
        Identifier => Token::Identifier(<String>),

        // Reserved keywords
        "while" => Token::While,
        "if" => Token::If,
        "else" => Token::Else,
        "var" => Token::Var,
        "const" => Token::Constant,
        "fn" => Token::Function,
        "return" => Token::Return,
        "for" => Token::For,
        "in" => Token::In,
        "pipe" => Token::Pipe,
        "and" => Token::LogicalAnd,
        "or" => Token::LogicalOr,
        "row" => Token::Row,
        "table" => Token::Table,

        // Types
        "bool" => Token::Boolean,
        "int" => Token::IntegerKeyword,
        "double" => Token::DoubleKeyword,
        "string" => Token::String,
        "null" => Token::Null,

        // Special chars
        ";" => Token::Semicolon,
        "," => Token::Comma,
        "(" => Token::Openparan,
        ")" => Token::Closeparan,
        "{" => Token::Opencurlybracket,
        "}" => Token::Closecurlybracket,
        "[" => Token::Opensquarebracket,
        "]" => Token::Closesquarebracket,
        "<" => Token::LeftAngle,
        ">" => Token::RightAngle,
        "<=" => Token::LessThanOrEqual,
        ">=" => Token::GreaterThanOrEqual,
        "=" => Token::AssignmentOperator,
        "==" => Token::EqualsOperator,
        "." => Token::Dot,
    }
}

pub Program: Statement = {
    // Match one or more statements
    <s:Stmt *> => *make_compound(s),
};

Stmt: Statement = {
    // Match a statement that consists of an expression followed by a semicolon
    <e:Expr> ";" => Statement::Expr(e),
    <e:Decl> ";" => Statement::Declaration(e), // Match a declaration followed by a semicolon
    <i:Identifier> "=" <e:Expr> ";" => Statement::VariableAssignment(i, e), // Variable assignment E.g. x = 5;
    "return" <e:Expr> ";" => Statement::Return(e), // Match a return statement with no expression
    "if" "(" <e:Expr> ")" "{" <s:Stmt *> "}" <f:ElseBlock?> => Statement::If(e, make_compound(s), f.unwrap_or_else(|| Box::new(Statement::Skip))),
    "for" "(" <p:Param> "in" <e:Expr> ")" "{" <s:Stmt *> "}" => Statement::For(p, e, make_compound(s)), // Match a for loop with a block of statements
    "while" "(" <e:Expr> ")" "{" <s:Stmt *> "}" => Statement::While(e, make_compound(s)), // Match a while loop with a block of statements
};

Decl: Declaration = {
    // Match variable declartions e.g. var int x = 5;
    "var" <t:Type> <i:Identifier> "=" <e:Expr> => Declaration::Variable(t, i, e), // Variable declaration E.g. var int x = 5;
    // Constant declaration e.g. const int x = 5;
    "const" <t:Type> <i:Identifier> "=" <e:Expr> => Declaration::Constant(t, i, e), // Constant declaration E.g. const int x = 5;
    // Match function declarations e.g. fn int add(int a, int b) { return a + b; }
    "fn" <t:Type> <i:Identifier> "(" <p:MultipleCommaSeperated<Param>> ")" "{" <s:Stmt *> "}" => Declaration::Function(t, i, p, make_compound(s)), // Function declaration E.g. fn int add(int a, int b) { return a + b; }
}

Type: TypeConstruct = {
    // Match the type keywords and map them to the corresponding enum variants
    "bool" => TypeConstruct::Bool,
    "int" => TypeConstruct::Int,
    "double" => TypeConstruct::Double,
    "string" => TypeConstruct::String,
    "null" => TypeConstruct::Null,
    <t:Type> "[" "]" => TypeConstruct::Array(Box::new(t)), // Match array types e.g. int[]
    "fn" <t:Type> "(" <p:MultipleCommaSeperated<Type>> ")" => TypeConstruct::Function(Box::new(t), p), // Match function types e.g. fn int(int, int)
    "table" "(" <p:MultipleCommaSeperated<Param>> ")" => TypeConstruct::Table(p), // Match table types e.g. table(int, string)
    "row" "(" <p:MultipleCommaSeperated<Param>> ")" => TypeConstruct::Row(p), // Match row types e.g. row(int, string)
};

// Entry rule for expressions: This is the starting point of the grammar
// and defines the structure of valid expressions.
Expr: Box<Expr> = {
    // Match terms like numbers, strings, parenthesized expressions, and identifiers
    #[precedence(level="0")] // Highest precedence
    TermExpr,

    // Match indexing expressions e.g. a[0] or a[0][1]
    #[precedence(level="1")] #[assoc(side="left")]
    <e:Expr> "[" <i:Expr> "]" => Box::new(Expr::Indexing(e, i)),
    <e:Expr> "pipe" <i:Identifier> "(" <x:MultipleCommaSeperated<Expr>> ")" => Box::new(Expr::Pipe(e, i, x)), // Match pipe expressions e.g. a pipe b(a, b)
    <e:Expr> "." <i:Identifier> => Box::new(Expr::ColumnIndexing(e, i)), // Match dot expressions e.g. a.b

    // March ** with right-to-left associativity
    #[precedence(level="2")] #[assoc(side="right")]
    <e:Expr> "**" <f:Expr> => Box::new(Expr::Operation(e, Operator::Exponent, f)),

    // Match * or / or % with left-to-right associativity
    #[precedence(level="3")] #[assoc(side="left")]
    <e:Expr> "*" <f:Expr> => Box::new(Expr::Operation(e, Operator::Multiplication, f)),
    <e:Expr> "/" <f:Expr> => Box::new(Expr::Operation(e, Operator::Division, f)),
    <e:Expr> "%" <f:Expr> => Box::new(Expr::Operation(e, Operator::Modulo, f)),

    // Match + or - with left-to-right associativity
    #[precedence(level="4")] #[assoc(side="left")]
    <e:Expr> "+" <f:Expr> => Box::new(Expr::Operation(e, Operator::Addition, f)),
    <e:Expr> "-" <f:Expr> => Box::new(Expr::Operation(e, Operator::Subtraction, f)),

    // Match == with left-to-right associativity
    #[precedence(level="5")] #[assoc(side="left")]
    <e:Expr> "==" <f:Expr> => Box::new(Expr::Operation(e, Operator::Equals, f)),

    <e:Expr> "<" <f:Expr> => Box::new(Expr::Operation(e, Operator::LessThan, f)),

    <e:Expr> ">" <f:Expr> => ast_greater_than(e, f),

    <e:Expr> "<=" <f:Expr> => Box::new(Expr::Operation(e, Operator::LessThanOrEqual, f,)),

    <e:Expr> ">=" <f:Expr> => ast_greater_than_or_equal(e, f),
    #[precedence(level="6")]
    "!" <e:Expr> => Box::new(Expr::Not(e)),

    #[precedence(level="7")] #[assoc(side="left")]
    <e:Expr> "and" <f:Expr> => ast_and(e, f),

    #[precedence(level="8")] #[assoc(side="left")]
    <e:Expr> "or" <f:Expr> => Box::new(Expr::Operation(e, Operator::Or, f)),
};

// Term represents the basic building blocks of expressions, such as numbers and parenthesized expressions
TermExpr: Box<Expr> = {
    // Literals
    Integer => Box::new(Expr::Number(<>)),
    DoubleLiteral => Box::new(Expr::Double(<>)),
    Stringliteral => Box::new(Expr::StringLiteral(<>)),
    // Null
    "null" => Box::new(Expr::Null),
    // An identifier
    Identifier => Box::new(Expr::Identifier(<>)),
    //True and false
    "true" => Box::new(Expr::Bool(true)),
    "false" => Box::new(Expr::Bool(false)),
    //Row and Table
    "row" "(" <c:MultipleCommaSeperated<ColumnAssignment>> ")" => Box::new(Expr::Row(c)),
    "table" "(" <p:MultipleCommaSeperated<Param>> ")" => Box::new(Expr::Table(p)),
    "[" <e:MultipleCommaSeperated<Expr>> "]" => Box::new(Expr::Array(e)), // Match array literals e.g. [1, 2, 3]
    <i:Identifier> "(" <x:MultipleCommaSeperated<Expr>> ")" => Box::new(Expr::FunctionCall(i, x)), // Match function calls e.g. f(x, y)
    "(" <Expr> ")"
};

/* 
=======================================
Building blocks, used in other rules
=======================================
*/

// Used to create comma separated list like int x, int y, int z for Param
MultipleCommaSeperated<T>: Vec<T> = {
    <c:(T ("," T)*)?> => {
        c.map(|(first, rest)| {
            let mut items = vec![first];
            items.extend(rest.into_iter().map(|(_, item)| item));
            items
        }).unwrap_or_else(Vec::new)
    }
};

// Used to define a single parameter like: int x
Param: Parameter = {
    <t:Type> <i:Identifier> => Parameter::Parameter(<>),
};

// Used to define a single parameter with assignment like: int x = 5
ColumnAssignment: ColumnAssignmentEnum = {
    <t:Type> <i:Identifier> "=" <e:Expr> => ColumnAssignmentEnum::ColumnAssignment(t, i, e),
};

// Else block used in if statement
ElseBlock: Box<Statement> = {
    "else" "{" <f:Stmt*> "}" => make_compound(f),
};